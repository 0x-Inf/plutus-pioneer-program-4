import { AppStateContext } from "@/pages/_app";
import {
    Address,
    PaymentKeyHash,
    SpendingValidator,
    UTxO,
    Unit,
    getAddressDetails,
} from "lucid-cardano";
import { applyParamsToScript, Data } from "lucid-cardano";
import { useContext, useEffect, useState } from "react";

const OracleRedeemer = Data.Enum([
    Data.Literal("Update"),
    Data.Literal("Delete"),
]);
type OracleRedeemer = Data.Static<typeof OracleRedeemer>;

export default function Oracle() {
    const { appState, setAppState } = useContext(AppStateContext);
    const {
        lucid,
        addr,
        nftPolicyIdHex,
        nftTokenNameHex,
        nftAssetClassHex,
        oracleUTxOWithNFT,
        oracleScript,
        oracleAddress,
    } = appState;
    const [rate, setRate] = useState(10n);
    const [count, setCount] = useState(0);

    useEffect(() => {
        getOracleNftUtxO();
        setTimeout(() => setCount(count + 1), 3e3);
    }, [count]);

    const getOracleNftUtxO = async () => {
        if (lucid && addr && oracleAddress) {
            const oracUtxO = await lucid.utxosAt(oracleAddress);
            const oracUtxOWithNFT = oracUtxO.find((utxo: UTxO) => {
                return Object.keys(utxo.assets).some((key) => {
                    return key == nftAssetClassHex;
                });
            });
            if (
                oracUtxOWithNFT == undefined ||
                oracUtxOWithNFT == oracleUTxOWithNFT
            )
                return;
            setAppState({ ...appState, oracleUTxOWithNFT: oracUtxOWithNFT });
        }
    };

    const parseRate = (r: string) => {
        const rate = BigInt(Number(r));
        if (Number.isNaN(rate)) return;
        setRate(rate);
    };

    const getFinalScript = async (
        pkh: PaymentKeyHash
    ): Promise<SpendingValidator | undefined> => {
        console.log("Deploying Oracle with Rate and AssetClass: ", {
            rate,
            nftPolicyIdHex,
            nftTokenNameHex,
        });
        if (!lucid || !nftPolicyIdHex || !nftTokenNameHex) return;

        const Params = Data.Tuple([Data.Bytes(), Data.Bytes(), Data.Bytes()]);
        type Params = Data.Static<typeof Params>;
        const oracleScript: SpendingValidator = {
            type: "PlutusV2",
            script: applyParamsToScript<Params>(
                "590bf4590bf101000032323322323322323232332232323232323232323232323232323232323232323232222223223232533532323232323253350041533533011500235006220011027133573892011a6f70657261746f72207369676e6174757265206d697373696e6700026153355335333573466e1cd4d40188800888ccc048d54cd4c05401484d4004880044c98c80b4cd5ce249146f7261636c6520696e707574206d697373696e670003222220030020014800809c098409c4cd5ce24918746f6b656e206d697373696e672066726f6d20696e70757400026153355335333573466e1cd4d40188800888ccc048d5400c888800c008005200202702610271335738920119746f6b656e206d697373696e672066726f6d206f75747075740002615335533533011500235006220011027133573892011a6f70657261746f72207369676e6174757265206d697373696e67000261533553355333535500122220021502e213018001232153353235001222222222222300e002500421301a00115030320013550322253350011503122135002225335333573466e3c00801c0b80b44d40d80044c01800c840a04098409c4cd5ce24914696e76616c6964206f757470757420646174756d000261026102610261533553353012002213500122350012222350092235002222222222222333553026120012235002222253353501822350062232335005233500425335333573466e3c00800412011c5400c411c811c8cd4010811c94cd4ccd5cd19b8f002001048047150031047153350032153350022133500223350022335002233500223303a002001204a2335002204a23303a00200122204a222335004204a2225335333573466e1c01800c13413054cd4ccd5cd19b8700500204d04c1333573466e1c01000413413041304130411454cd40048411441144cd4114018014401541000284c98c80a8cd5ce2481024c660002f130284988854cd40044008884c0b126135001220023333573466e1cd55cea802a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4090094d5d0a80619a8120129aba1500b33502402635742a014666aa050eb9409cd5d0a804999aa8143ae502735742a01066a04805a6ae85401cccd540a00b9d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40e1d69aba150023039357426ae8940088c98c80fccd5ce01e02201e89aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a81c3ad35742a00460726ae84d5d1280111931901f99ab9c03c04403d135573ca00226ea8004d5d09aba2500223263203b33573807008007226aae7940044dd50009aba1500533502475c6ae854010ccd540a00a88004d5d0a801999aa8143ae200135742a00460586ae84d5d1280111931901b99ab9c03403c035135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00a60386ae84d5d1280291931901499ab9c02602e0273333573466e1d40192002212200223333573466e1d401d2000212200123263202933573804c05c04e04c6eb401ccc8848cc00400c008cd5409cdd70049bae008375c00e2054264c6404a66ae71241035054350002a135573ca00226ea80044d55ce9baa0012223232300100532001355025223350014800088d4008894cd4ccd5cd19b8f002009021020130070011300600332001355024223350014800088d4008894cd4ccd5cd19b8f00200702001f1001130060032235002222222222222533533355301212001501125335333573466e3c0380040940904d40b4004540b001084094408cc8004d5407c88448894cd40044008884cc014008ccd54c01c480040140100048d400488d4008888888888888cccd4034940ac940ac940ac8ccd54c0484800540448d4004894cd54cd4ccd5cd19b8f350022200235004220020270261333573466e1cd400888004d40108800409c09840984d40bc00c540b80344c848cc004894cd40088400c40040094068c8004d5407088448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000488ccd5cd19b8f0020010130122333333357480024a0324a0324a03246a0346eb40089406406848c88c008dd6000990009aa80d111999aab9f00125018233501730043574200460066ae8800806c8c8c8cccd5cd19b8735573aa004900011991091980080180118051aba150023005357426ae8940088c98c8058cd5ce00980d80a09aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa004900011991091980080180118099aba1500233500d012357426ae8940088c98c806ccd5ce00c01000c89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403a66ae7006808806c0680644d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201733573802803802a26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355017223233335573e0044a02c466a02a66aa02e600c6aae754008c014d55cf280118021aba200301913574200224464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900a19ab9c011019012011135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900a19ab9c01101901201101000f135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900819ab9c00d01500e135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8038cd5ce00580980609baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c805ccd5ce00a00e00a80a00980900880800789aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6402066ae700340540380344d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200d33573801402401601426aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401c66ae7002c04c03002c0284d55cea80089baa0012323333573466e1d40052002200523333573466e1d40092000200523263200a33573800e01e01000e26aae74dd5000891001091000a48103505431002326320033357389212265787065637465642065786163746c79206f6e65206f7261636c65206f7574707574000084984488008488488cc00401000c448848cc00400c00848488c00800c448800448004448c8c00400488cc00cc008008005",
                [nftPolicyIdHex, nftTokenNameHex, pkh],
                Params
            ),
        };
        return oracleScript;
    };

    const deployOracle = async () => {
        if (!lucid || !addr) {
            alert("Please connect account and mint NFT!");
            return;
        }
        const pkh: string =
            getAddressDetails(addr).paymentCredential?.hash || "";
        const oracle = await getFinalScript(pkh);
        if (!oracle || !nftAssetClassHex) {
            alert("Please mint NFT first!");
            return;
        }
        const oracleAddress = lucid!.utils.validatorToAddress(oracle);
        console.log("final oracle script: ", oracle);
        console.log("final oracle address: ", oracleAddress);
        setAppState({
            ...appState,
            oracleScript: oracle,
            oracleAddress: oracleAddress,
        });

        const tx = await lucid!
            .newTx()
            .payToContract(
                oracleAddress,
                { inline: Data.to(rate, Data.Integer()) },
                { [nftAssetClassHex]: 1n }
            )
            .addSignerKey(pkh)
            .complete();
        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log("tid: " + txHash);
    };

    const updateOracle = async () => {
        if (
            addr &&
            lucid &&
            nftAssetClassHex &&
            oracleScript &&
            oracleUTxOWithNFT &&
            oracleAddress
        ) {
            const pkh: string =
                getAddressDetails(addr).paymentCredential?.hash || "";

            const tx = await lucid!
                .newTx()
                .collectFrom(
                    [oracleUTxOWithNFT], // UTXO to spend
                    Data.to<OracleRedeemer>("Update", OracleRedeemer) // Redeemer
                )
                .payToContract(
                    oracleAddress,
                    { inline: Data.to(rate, Data.Integer()) },
                    { [nftAssetClassHex]: 1n }
                )
                .attachSpendingValidator(oracleScript)
                .addSignerKey(pkh)
                .complete();

            const signedTx = await tx.sign().complete();
            const txHash = await signedTx.submit();
            console.log("tid: " + txHash);
        } else {
            alert("Please, deploy the oracle before updating it!");
        }
    };

    //////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////// ORACLE TESTS /////////////////////////////////////

    const tFinalOracleScript: SpendingValidator = {
        type: "PlutusV2",
        script: "590c72590c6f010000333232332232332232323233223232323232323232323232323232323232323232323223232222322323253353232323232325335004153353301250023500622001102813357389211a6f70657261746f72207369676e6174757265206d697373696e6700027153355335333573466e1cd4d40188800888ccc04cd54cd4c05801484d4004880044c98c80b8cd5ce249146f7261636c6520696e707574206d697373696e67000332222003002001480080a009c40a04cd5ce24918746f6b656e206d697373696e672066726f6d20696e70757400027153355335333573466e1cd4d40188800888ccc04cd5400c888800c008005200202802710281335738920119746f6b656e206d697373696e672066726f6d206f75747075740002715335533533012500235006220011028133573892011a6f70657261746f72207369676e6174757265206d697373696e67000271533553355333535500122220021502f213019001232153353235001222222222222300e002500421301b00115031320013550332253350011503222135002225335333573466e3c00801c0bc0b84d40dc0044c01800c840a4409c40a04cd5ce24914696e76616c6964206f757470757420646174756d000271027102710271533553353013002213500122350012222350092235002222222222222333553027120012235002222253353501822350062232335005233500425335333573466e3c0080041241205400c412081208cd4010812094cd4ccd5cd19b8f002001049048150031048153350032153350022133500223350022335002233500223303b002001204b2335002204b23303b00200122204b222335004204b2225335333573466e1c01800c13813454cd4ccd5cd19b8700500204e04d1333573466e1c01000413813441344134411854cd40048411841184cd4118018014401541040284c98c80accd5ce2481024c6600030130294988854cd40044008884c0b526135001220023333573466e1cd55cea802a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4094098d5d0a80619a8128131aba1500b33502502735742a014666aa052eb940a0d5d0a804999aa814bae502835742a01066a04a05c6ae85401cccd540a40bdd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40e5d69aba15002303a357426ae8940088c98c8100cd5ce01e82281f09aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a81cbad35742a00460746ae84d5d1280111931902019ab9c03d04503e135573ca00226ea8004d5d09aba2500223263203c33573807208207426aae7940044dd50009aba1500533502575c6ae854010ccd540a40ac8004d5d0a801999aa814bae200135742a004605a6ae84d5d1280111931901c19ab9c03503d036135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00a603a6ae84d5d1280291931901519ab9c02702f0283333573466e1d40192002212200223333573466e1d401d2000212200123263202a33573804e05e05004e6eb401ccc8848cc00400c008cccd5cd19b8735573aa0129000119aa8149bae35742a0126eb8d5d09aba2500923263202733573804805804a6eb801c40ac4c98c8098cd5ce2481035054350002b135573ca00226ea80044d55ce9baa001135573ca00226ea8004888c8c8c004014c8004d5409488cd400520002235002225335333573466e3c0080240840804c01c0044c01800cc8004d5409088cd400520002235002225335333573466e3c00801c08007c40044c01800c88d40088888888888894cd4ccd54c04848005404494cd4ccd5cd19b8f00e00102502413502d0011502c0042102510233200135501f221122253350011002221330050023335530071200100500400123500122350022222222222223333500d2502b2502b2502b23335530121200150112350012253355335333573466e3cd400888008d40108800809c0984ccd5cd19b8735002220013500422001027026102613502f0031502e00d1321233001225335002210031001002501a3200135501c221122253350011350032200122133350052200230040023335530071200100500400122333573466e3c00800404c0488ccccccd5d20009280c9280c9280c91a80d1bad0022501901a1232230023758002640026aa034446666aae7c004940608cd405cc010d5d080118019aba200201b232323333573466e1cd55cea8012400046644246600200600460146ae854008c014d5d09aba2500223263201633573802603602826aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea8012400046644246600200600460266ae854008cd4034048d5d09aba2500223263201b33573803004003226aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931900e99ab9c01a02201b01a019135573aa00226ea8004d5d0a80119a804bae357426ae8940088c98c805ccd5ce00a00e00a89aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d5405c88c8cccd55cf8011280b119a80a99aa80b98031aab9d5002300535573ca00460086ae8800c0644d5d080089119191999ab9a3370ea002900011a80b98029aba135573ca00646666ae68cdc3a801240044a02e464c6402866ae700440640480444d55cea80089baa001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402866ae7004406404804404003c4d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6402066ae700340540384d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200e33573801602601826ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201733573802803802a02802602402202001e26aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900819ab9c00d01500e00d135573aa00626ae8940044d55cf280089baa001232323333573466e1d400520022321223001003375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c8034cd5ce00500900580509aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900719ab9c00b01300c00b00a135573aa00226ea80048c8cccd5cd19b8750014800880148cccd5cd19b8750024800080148c98c8028cd5ce00380780400389aab9d375400224400424400292103505431002326320033357389212265787065637465642065786163746c79206f6e65206f7261636c65206f7574707574000084984488008488488cc00401000c448848cc00400c00848488c00800c448800448004448c8c00400488cc00cc00800800530012a58284fa08b764e74a89e520738b2718f64037718726eb4a4e9e33184b4eb4f7261636c652773204e4654004c011e581ce48dea1ea0c60cfeed371d456419c10e83c72d772ec4631c73a4991e0001",
    };
    const tFinalScriptAddress: Address =
        "addr_test1wrj6st0kk6qddldzwyawduj7dmsgylddajl829zgfgpzudqptxnaz";

    const tNFT: Unit =
        "4fa08b764e74a89e520738b2718f64037718726eb4a4e9e33184b4eb4f7261636c652773204e4654";

    const tNftUtxo: UTxO = {
        txHash: "8bfeb1a3ddce25df4ac4424f7a356c4c8b74a07cc8ccaebeffa0bc1528c1a802",
        outputIndex: 0,
        assets: { [tNFT]: 1n, lovelace: 1090430n },
        address: tFinalScriptAddress,
        datum: "0a",
        datumHash: undefined,
        scriptRef: null,
    };

    const testUpdateOracle = async () => {
        if (addr) {
            const pkh: string =
                getAddressDetails(addr).paymentCredential?.hash || "";

            const redJSON = {
                constructor: 0,
                fields: [],
            };

            const tx = await lucid!
                .newTx()
                .collectFrom(
                    [tNftUtxo], // UTXO to spend
                    Data.to<OracleRedeemer>("Update", OracleRedeemer) // Redeemer
                )
                .payToContract(
                    tFinalScriptAddress,
                    { inline: Data.to(rate, Data.Integer()) },
                    { [tNFT]: 1n }
                )
                .attachSpendingValidator(tFinalOracleScript)
                .addSignerKey(pkh)
                .complete();

            const signedTx = await tx.sign().complete();
            const txHash = await signedTx.submit();
            console.log("tid: " + txHash);
        } else {
            alert("Please connect account and mint NFT!");
        }
    };

    const testDeleteOracle = async () => {
        if (addr && lucid && tNFT && tFinalOracleScript && tNftUtxo) {
            const pkh: string =
                getAddressDetails(addr).paymentCredential?.hash || "";

            const tx = await lucid!
                .newTx()
                .collectFrom(
                    [tNftUtxo], // UTXO to spend
                    Data.to<OracleRedeemer>("Delete", OracleRedeemer) // Redeemer
                )
                .attachSpendingValidator(tFinalOracleScript)
                .addSignerKey(pkh)
                .payToAddress(addr, { [tNFT]: 1n })
                .complete();

            const signedTx = await tx.sign().complete();
            const txHash = await signedTx.submit();
            console.log("tid: " + txHash);
        } else {
            alert("Please connect account and mint NFT!");
        }
    };

    //////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////

    return (
        <div className="">
            <div className="flex flex-row">
                <p>Current USD/ADA:</p>
                <input
                    type="number"
                    value={Number(rate)}
                    onChange={(e) => parseRate(e.target.value)}
                />
            </div>
            <button
                onClick={deployOracle}
                disabled={!lucid || !addr || !nftAssetClassHex || rate === 0n}
                className="m-3 p-3 disabled:bg-slate-400 bg-violet-400"
            >
                {" "}
                Deploy Oracle
            </button>
            <button
                onClick={updateOracle}
                disabled={
                    !lucid ||
                    !addr ||
                    !nftAssetClassHex ||
                    rate === 0n ||
                    !oracleUTxOWithNFT
                }
                className="m-3 p-3 disabled:bg-slate-400 bg-green-400"
            >
                {" "}
                Update Oracle
            </button>

            <button
                onClick={testUpdateOracle}
                className="m-3 p-3 disabled:bg-slate-400 bg-red-400"
            >
                {" "}
                Update Test Oracle
            </button>
            <button
                onClick={testDeleteOracle}
                className="m-3 p-3 disabled:bg-slate-400 bg-red-400"
            >
                {" "}
                Delete Test Oracle
            </button>
        </div>
    );
}
