import { PolicyId, Unit } from "lucid-cardano";
import React, { useContext, useState } from "react";
import {
    applyParamsToScript,
    Data,
    MintingPolicy,
    fromText,
} from "lucid-cardano";
import { AppStateContext } from "@/pages/_app";
import { signAndSubmitTx } from "@/utilities/utilities";

export default function DeployScripts() {
    const { appState, setAppState } = useContext(AppStateContext);
    const {
        lucid,
        wAddr,
        oracleScript,
        collateralScript,
        txScriptsDeployment,
        txCollScriptDeployment,
        txMintingPolScriptDeployment,
    } = appState;
    const [mPerc, setMPerc] = useState(150n);

    const parseMinPerc = (r: string) => {
        const mPerc = BigInt(Number(r));
        if (Number.isNaN(mPerc)) return;
        setMPerc(mPerc);
    };

    const getFinalMintingPolicy = async () => {
        if (!lucid || !wAddr || !oracleScript || !mPerc) return;
        const tn = fromText("USDP");
        const oracleValidatorHash = await lucid.utils.validatorToScriptHash(
            oracleScript
        );
        const collateralValidatorHash = await lucid.utils.validatorToScriptHash(
            collateralScript
        );

        console.log("Applying minting script to these parameters: ", {
            OracleValHash: oracleValidatorHash,
            CollateralValHash: collateralValidatorHash,
            minPercent: mPerc,
        });

        const Params = Data.Tuple([Data.Bytes(), Data.Bytes(), Data.Integer()]);
        type Params = Data.Static<typeof Params>;
        const scPolicy: MintingPolicy = {
            type: "PlutusV2",
            script: applyParamsToScript<Params>(
                "",
                [oracleValidatorHash, collateralValidatorHash, mPerc],
                Params
            ),
        };
        const scPolicyId: PolicyId = lucid!.utils.mintingPolicyToId(scPolicy);

        const unit: Unit = scPolicyId + tn;
        setAppState({
            ...appState,
            scPolicyIdHex: scPolicyId,
            scTokenNameHex: tn,
            scAssetClassHex: unit,
            scPolicy: scPolicy,
            minPercent: Number(mPerc),
            oracleScriptHash: oracleValidatorHash,
            collateralScriptHash: collateralValidatorHash,
        });

        return scPolicy;
    };

    const deployBothScriptsInOneTx = async () => {
        if (!lucid || !wAddr || txScriptsDeployment) return;
        console.log("deployBothScriptsInOneTx -> appState: ", appState);
        const scPolicy = await getFinalMintingPolicy();
        if (!scPolicy) return;
        const tx = await lucid
            .newTx()
            .payToAddressWithData(
                wAddr,
                { inline: Data.void(), scriptRef: collateralScript },
                {}
            )
            .payToAddressWithData(
                wAddr,
                { inline: Data.void(), scriptRef: scPolicy },
                {}
            )
            .complete();

        const pid = await signAndSubmitTx(tx);
        console.log("Deployed both scripts: ", pid);
        setAppState({ ...appState, txScriptsDeployment: pid });
    };

    return (
        <div>
            <div className="flex flex-row">
                <p>Minimum Percentage of Collateral:</p>
                <input
                    type="number"
                    value={Number(mPerc)}
                    onChange={(e) => parseMinPerc(e.target.value)}
                />
            </div>
            <button
                onClick={deployBothScriptsInOneTx}
                disabled={
                    !wAddr ||
                    !oracleScript ||
                    !mPerc ||
                    !!txCollScriptDeployment ||
                    !!txMintingPolScriptDeployment
                }
                className="bg-blue-500 disabled:bg-slate-300 hover:bg-orange-700 text-white font-bold p-2 m-4 rounded"
            >
                {" "}
                Deploy Scripts
            </button>
        </div>
    );
}
